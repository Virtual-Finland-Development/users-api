version: "3.1"

services:
  usersapi:
    image: virtualfinland/usersapi:latest
    build:
      context: ./VirtualFinland.UserAPI/src/VirtualFinland.UsersAPI
      dockerfile: ${USERAPI_DOCKERFILE:-Dockerfile}
    ports:
      - 5001:80
    environment:
      ASPNETCORE_ENVIRONMENT: local
      CONNECTIONSTRINGS__DEFAULTCONNECTION: Host=postgresdb;Database=postgres;Username=appuser;Password=password
      AWS_REGION: eu-north-1
      "CodesetApiBaseUrl": ${CodesetApiBaseUrl:-http://host.docker.internal:3166/resources}
      "SuomiFi__AuthorizationJwksJsonUrl": ${SuomiFi__AuthorizationJwksJsonUrl:-http://host.docker.internal:4078/auth/saml2/suomifi/.well-known/jwks.json}
    depends_on:
      postgresdb:
        condition: service_healthy
      usersapi-local-initialization:
        condition: service_completed_successfully
    networks:
      - vfd-network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  usersapi-local-initialization:
    image: mcr.microsoft.com/dotnet/sdk:6.0
    volumes:
      - ./:/app
    working_dir: /app
    command: >
      bash -c "
        set -e
        echo '> Initializing local database..'
        dotnet run --project ./VirtualFinland.UsersAPI.AdminFunction.CLI migrate
        echo '> Initializing local audit log triggers..'
        dotnet run --project ./VirtualFinland.UsersAPI.AdminFunction.CLI initialize-database-audit-log-triggers
        echo '> Initializing local database user..'
        dotnet run --project ./VirtualFinland.UsersAPI.AdminFunction.CLI initialize-database-user
        echo '> Initialization script executed - shutting down';
      "
    environment:
      ASPNETCORE_ENVIRONMENT: local
      CONNECTIONSTRINGS__DEFAULTCONNECTION: Host=postgresdb;Database=postgres;Username=postgres;Password=example
      AWS_REGION: eu-north-1
      DATABASE_USER: appuser
      DATABASE_PASSWORD: password
    depends_on:
      postgresdb:
        condition: service_healthy
    networks:
      - vfd-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    labels:
      - "traefik.enable=false"

  postgresdb:
    image: postgres:14
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - 5432:5432
    environment:
      POSTGRES_PASSWORD: example
      POSTGRES_USER: postgres
    volumes:
      - postgresdb:/var/lib/postgresql/data
    networks:
      - vfd-network
    labels:
      - "traefik.enable=false"

  adminer:
    image: adminer
    ports:
      - 8080:8080
    networks:
      - vfd-network

volumes:
  postgresdb:

networks:
  vfd-network:
    external: true
    driver: bridge
